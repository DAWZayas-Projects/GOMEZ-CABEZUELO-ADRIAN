{"version":3,"sources":["authed.js"],"names":[],"mappings":";;;;;QAMgB,S,GAAA,S;QAyBA,M,GAAA,M;QAeA,Q,GAAA,Q;QA8BA,Y,GAAA,Y;;AA5EhB;;IAAY,K;;AACZ;;;;AACA;;;;AAEA;;;;;;AAEO,SAAS,SAAT,GAAqB;AACxB,WAAO,oBAAY;AACf,cAAM,cAAN,EAAuB;AACf,yBAAa;AADE,SAAvB,EAGK,IAHL,CAGW,qBAAa;AAChB,mBAAO,UAAU,IAAV,EAAP;AACH,SALL,EAMK,IANL,CAMW,iBAAS;AACZ,gBAAG,MAAM,OAAN,IAAiB,KAApB,EAA2B;AACzB,yBAAS;AACL,0BAAO,MAAM,WADR;AAEL,6BAAS;AAFJ,iBAAT;AAIA,kCAAQ,IAAR,CAAa,SAAb;AACD,aAND,MAMM;AACJ,yBAAS;AACL,0BAAO,MAAM,YADR;AAEL,6BAAS,MAAM;AAFV,iBAAT;AAID;AACJ,SAnBL;AAoBH,KArBD;AAsBH;;AAEM,SAAS,MAAT,GAAkB;AACvB,WAAO,oBAAY;AACjB,cAAM,cAAN,EAAsB;AACpB,yBAAa;AADO,SAAtB,EAGC,IAHD,CAGO,aAAK;AACV,qBAAS;AACP,sBAAO,MAAM,OADN;AAEP,yBAAS;AAFF,aAAT;AAIA,8BAAQ,IAAR,CAAa,SAAb;AACD,SATD;AAUD,KAXD;AAYD;;AAEM,SAAS,QAAT,CAAkB,QAAlB,EAA4B;AAC/B,WAAO,oBAAY;AACf,yBAAE,IAAF,CAAO,aAAP,EAAsB;AACd,kBAAM,MADQ;AAEd,yBAAa,iCAFC;AAGd,kBAAO,KAAK,SAAL,CAAe,QAAf,CAHO;AAId,mBAAQ,IAJM;AAKd,qBAAS,iBAAS,IAAT,EAAe,MAAf,EAAuB,GAAvB,EAA4B;AACjC,oBAAG,KAAK,MAAL,IAAe,GAAlB,EAAuB;AACnB,0BAAM,gDAAN;AACA,6BAAS;AACL,8BAAO,MAAM,WADR;AAEL,iCAAS;AAFJ,qBAAT;AAIH,iBAND,MAMO;AACH,6BAAS;AACL,8BAAO,MAAM,YADR;AAEL,iCAAS,KAAK;AAFT,qBAAT;AAIA,sCAAQ,IAAR,CAAa,OAAb;AACH;AACJ,aAnBa;AAoBd,uBAAW;AACP,iCAAiB;AADV,aApBG;AAuBd,yBAAa;AAvBC,SAAtB;AAyBH,KA1BD;AA2BH;;AAEM,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACjC,WAAO,oBAAY;AACjB,yBAAE,IAAF,CAAO,gBAAP,EAAyB;AACvB,kBAAM,MADiB;AAEvB,yBAAa,iCAFU;AAGvB,kBAAO,KAAK,SAAL,CAAe,IAAf,CAHgB;AAIvB,mBAAO,IAJgB;AAKvB,qBAAS,iBAAS,IAAT,EAAe,MAAf,EAAuB,GAAvB,EAA4B;AACnC,oBAAG,KAAK,MAAL,IAAe,GAAlB,EAAuB;AACnB,0BAAM,2BAAN;AACA,6BAAS;AACL,8BAAO,MAAM,WADR;AAEL,iCAAS;AAFJ,qBAAT;AAIH,iBAND,MAMO;AACH,6BAAS;AACL,8BAAO,MAAM,YADR;AAEL,iCAAS;AAFJ,qBAAT;AAIA,sCAAQ,IAAR,CAAa,OAAb;AACH;AACF;AAnBsB,SAAzB;AAqBD,KAtBD;AAuBD","file":"authed-compiled.js","sourcesContent":["import * as types from '../constants/ActionTypes';\nimport $ from 'jquery';\nimport history from '../store/history';\n\nimport 'whatwg-fetch';\n\nexport function checkAuth() {\n    return dispatch => {\n        fetch('/auth/status',  {\n                credentials: 'same-origin'\n            })\n            .then( tresponse => {\n                return tresponse.json()\n            })\n            .then( tjson => {\n                if(tjson.isLogin == false) {\n                  dispatch({\n                      type : types.AUTH_FAILED,\n                      payload: {},\n                  })\n                  history.push('/signin')\n                }else {\n                  dispatch({\n                      type : types.AUTH_SUCCESS,\n                      payload: tjson.user,\n                  })\n                }\n            })\n    }\n}\n\nexport function logOut() {\n  return dispatch => {\n    fetch('/auth/logout', {\n      credentials: 'same-origin'\n    })\n    .then( _ => {\n      dispatch({\n        type : types.LOG_OUT,\n        payload: {},\n      })\n      history.push('/signin')\n    })\n  }\n}\n\nexport function authUser(authinfo) {\n    return dispatch => {\n        $.ajax('/auth/login', {\n                type: \"POST\",\n                contentType: \"application/json; charset=utf-8\",\n                data : JSON.stringify(authinfo),\n                async : true,\n                success: function(data, status, xhr) {\n                    if(data.status == 400) {\n                        alert('Login errro, username/password bad credentials')\n                        dispatch({\n                            type : types.AUTH_FAILED,\n                            payload: {},\n                        })\n                    } else {\n                        dispatch({\n                            type : types.AUTH_SUCCESS,\n                            payload: data.user,\n                        })\n                        history.push('/main')\n                    }\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true\n        });\n    }\n}\n\nexport function registerUser(data) {\n  return dispatch => {\n    $.ajax('/auth/register', {\n      type: \"POST\",\n      contentType: \"application/json; charset=utf-8\",\n      data : JSON.stringify(data),\n      async: true,\n      success: function(data, status, xhr) {\n        if(data.status == 400) {\n            alert('Login errro, no valid ...')\n            dispatch({\n                type : types.AUTH_FAILED,\n                payload: {},\n            })\n        } else {\n            dispatch({\n                type : types.AUTH_SUCCESS,\n                payload: data,\n            })\n            history.push('/main')\n        }\n      }\n    })\n  }\n}\n"]}